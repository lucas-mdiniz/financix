{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Public/repos/financix/src/components/Graphs/Home/index.jsx\";\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst ReportGraph = () => {\n  const graphRef = useRef(null);\n  const dataset = [{\n    name: 'bar',\n    value: 300,\n    type: 'expense'\n  }, {\n    name: 'shopping',\n    value: 400,\n    type: 'earning'\n  }];\n  useEffect(() => {\n    const g = d3.select(graphRef.current);\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 150\n    };\n    const innerWidth = 500 - margin.left - margin.right;\n    const innerHeight = 500 - margin.top - margin.bottom;\n\n    const xValue = d => d.value;\n\n    const yValue = d => d.name;\n\n    const xScale = d3.scaleLinear().domain([0, d3.max(dataset, xValue)]).range([0, innerWidth]);\n    const yScale = d3.scaleBand().domain(dataset.map(yValue)).range([0, innerHeight]);\n    const yAxis = d3.axisLeft(yScale);\n    yAxis(g.append('g'));\n    g.attr('transform', `translate(${margin.left}, ${margin.top})`);\n    g.selectAll('rect').data(dataset).enter().append('rect').attr('y', d => yScale(yValue(d))).attr('width', d => xScale(xValue(d))).attr('height', yScale.bandwidth());\n  });\n  return React.createElement(\"svg\", {\n    height: \"500\",\n    width: \"500\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    ref: graphRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }));\n};\n\nexport default ReportGraph;","map":{"version":3,"sources":["/home/lucas/Public/repos/financix/src/components/Graphs/Home/index.jsx"],"names":["React","useRef","useEffect","d3","ReportGraph","graphRef","dataset","name","value","type","g","select","current","margin","top","right","bottom","left","innerWidth","innerHeight","xValue","d","yValue","xScale","scaleLinear","domain","max","range","yScale","scaleBand","map","yAxis","axisLeft","append","attr","selectAll","data","enter","bandwidth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,QAAQ,GAAGJ,MAAM,CAAC,IAAD,CAAvB;AAEA,QAAMK,OAAO,GAAG,CACd;AAAEC,IAAAA,IAAI,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE,GAAtB;AAA2BC,IAAAA,IAAI,EAAE;AAAjC,GADc,EAEd;AAAEF,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,KAAK,EAAE,GAA3B;AAAgCC,IAAAA,IAAI,EAAE;AAAtC,GAFc,CAAhB;AAKAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,CAAC,GAAGP,EAAE,CAACQ,MAAH,CAAUN,QAAQ,CAACO,OAAnB,CAAV;AACA,UAAMC,MAAM,GAAG;AAAEC,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,KAAK,EAAE,EAAlB;AAAsBC,MAAAA,MAAM,EAAE,EAA9B;AAAkCC,MAAAA,IAAI,EAAE;AAAxC,KAAf;AACA,UAAMC,UAAU,GAAG,MAAML,MAAM,CAACI,IAAb,GAAoBJ,MAAM,CAACE,KAA9C;AACA,UAAMI,WAAW,GAAG,MAAMN,MAAM,CAACC,GAAb,GAAmBD,MAAM,CAACG,MAA9C;;AAEA,UAAMI,MAAM,GAAGC,CAAC,IAAIA,CAAC,CAACb,KAAtB;;AACA,UAAMc,MAAM,GAAGD,CAAC,IAAIA,CAAC,CAACd,IAAtB;;AAEA,UAAMgB,MAAM,GAAGpB,EAAE,CACdqB,WADY,GAEZC,MAFY,CAEL,CAAC,CAAD,EAAItB,EAAE,CAACuB,GAAH,CAAOpB,OAAP,EAAgBc,MAAhB,CAAJ,CAFK,EAGZO,KAHY,CAGN,CAAC,CAAD,EAAIT,UAAJ,CAHM,CAAf;AAKA,UAAMU,MAAM,GAAGzB,EAAE,CACd0B,SADY,GAEZJ,MAFY,CAELnB,OAAO,CAACwB,GAAR,CAAYR,MAAZ,CAFK,EAGZK,KAHY,CAGN,CAAC,CAAD,EAAIR,WAAJ,CAHM,CAAf;AAKA,UAAMY,KAAK,GAAG5B,EAAE,CAAC6B,QAAH,CAAYJ,MAAZ,CAAd;AAEAG,IAAAA,KAAK,CAACrB,CAAC,CAACuB,MAAF,CAAS,GAAT,CAAD,CAAL;AAEAvB,IAAAA,CAAC,CAACwB,IAAF,CAAO,WAAP,EAAqB,aAAYrB,MAAM,CAACI,IAAK,KAAIJ,MAAM,CAACC,GAAI,GAA5D;AAEAJ,IAAAA,CAAC,CAACyB,SAAF,CAAY,MAAZ,EACGC,IADH,CACQ9B,OADR,EAEG+B,KAFH,GAGGJ,MAHH,CAGU,MAHV,EAIGC,IAJH,CAIQ,GAJR,EAIab,CAAC,IAAIO,MAAM,CAACN,MAAM,CAACD,CAAD,CAAP,CAJxB,EAKGa,IALH,CAKQ,OALR,EAKiBb,CAAC,IAAIE,MAAM,CAACH,MAAM,CAACC,CAAD,CAAP,CAL5B,EAMGa,IANH,CAMQ,QANR,EAMkBN,MAAM,CAACU,SAAP,EANlB;AAOD,GAhCQ,CAAT;AAkCA,SACE;AAAK,IAAA,MAAM,EAAC,KAAZ;AAAkB,IAAA,KAAK,EAAC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,GAAG,EAAEjC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CA/CD;;AAiDA,eAAeD,WAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst ReportGraph = () => {\n  const graphRef = useRef(null);\n\n  const dataset = [\n    { name: 'bar', value: 300, type: 'expense' },\n    { name: 'shopping', value: 400, type: 'earning' },\n  ];\n\n  useEffect(() => {\n    const g = d3.select(graphRef.current);\n    const margin = { top: 20, right: 20, bottom: 20, left: 150 };\n    const innerWidth = 500 - margin.left - margin.right;\n    const innerHeight = 500 - margin.top - margin.bottom;\n\n    const xValue = d => d.value;\n    const yValue = d => d.name;\n\n    const xScale = d3\n      .scaleLinear()\n      .domain([0, d3.max(dataset, xValue)])\n      .range([0, innerWidth]);\n\n    const yScale = d3\n      .scaleBand()\n      .domain(dataset.map(yValue))\n      .range([0, innerHeight]);\n\n    const yAxis = d3.axisLeft(yScale);\n\n    yAxis(g.append('g'));\n\n    g.attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n    g.selectAll('rect')\n      .data(dataset)\n      .enter()\n      .append('rect')\n      .attr('y', d => yScale(yValue(d)))\n      .attr('width', d => xScale(xValue(d)))\n      .attr('height', yScale.bandwidth());\n  });\n\n  return (\n    <svg height=\"500\" width=\"500\">\n      <g ref={graphRef} />\n    </svg>\n  );\n};\n\nexport default ReportGraph;\n"]},"metadata":{},"sourceType":"module"}