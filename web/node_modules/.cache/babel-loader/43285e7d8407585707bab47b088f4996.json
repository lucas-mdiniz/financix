{"ast":null,"code":"import _slicedToArray from \"/home/lucas/Public/repos/financix/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/lucas/Public/repos/financix/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/lucas/Public/repos/financix/src/components/AddTransaction/index.jsx\";\nimport React from 'react';\nimport { Formik, Form, useField } from 'formik';\nimport * as Yup from 'yup';\n\nconst MyTextInput = (_ref) => {\n  let label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const _useField = useField(props),\n        _useField2 = _slicedToArray(_useField, 2),\n        field = _useField2[0],\n        meta = _useField2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, label), React.createElement(\"input\", Object.assign({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  })), meta.touched && meta.error ? React.createElement(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nconst AddTransaction = () => {\n  return React.createElement(Formik, {\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      acceptedTerms: false,\n      // added for our checkbox\n      jobType: '' // added for our select\n\n    },\n    validationSchema: Yup.object({\n      firstName: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n      lastName: Yup.string().max(20, 'Must be 20 characters or less').required('Required'),\n      email: Yup.string().email('Invalid email addresss`').required('Required'),\n      acceptedTerms: Yup.boolean().required('Required').oneOf([true], 'You must accept the terms and conditions.'),\n      jobType: Yup.string() // specify the set of valid values for job type\n      // @see http://bit.ly/yup-mixed-oneOf\n      .oneOf(['designer', 'development', 'product', 'other'], 'Invalid Job Type').required('Required')\n    }),\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(MyTextInput, {\n    label: \"Description\",\n    name: \"description\",\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(MyTextInput, {\n    label: \"Amount\",\n    name: \"amount\",\n    type: \"text\",\n    placeholder: \"0,00\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })));\n};\n\nexport default AddTransaction;","map":{"version":3,"sources":["/home/lucas/Public/repos/financix/src/components/AddTransaction/index.jsx"],"names":["React","Formik","Form","useField","Yup","MyTextInput","label","props","field","meta","id","name","touched","error","AddTransaction","firstName","lastName","email","acceptedTerms","jobType","object","string","max","required","boolean","oneOf","values","setSubmitting","setTimeout","alert","JSON","stringify"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Formik, Form, useField } from 'formik';\nimport * as Yup from 'yup';\n\nconst MyTextInput = ({ label, ...props }) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input className=\"text-input\" {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nconst AddTransaction = () => {\n  return (\n    <Formik\n      initialValues={{\n        firstName: '',\n        lastName: '',\n        email: '',\n        acceptedTerms: false, // added for our checkbox\n        jobType: '', // added for our select\n      }}\n      validationSchema={Yup.object({\n        firstName: Yup.string()\n          .max(15, 'Must be 15 characters or less')\n          .required('Required'),\n        lastName: Yup.string()\n          .max(20, 'Must be 20 characters or less')\n          .required('Required'),\n        email: Yup.string()\n          .email('Invalid email addresss`')\n          .required('Required'),\n        acceptedTerms: Yup.boolean()\n          .required('Required')\n          .oneOf([true], 'You must accept the terms and conditions.'),\n        jobType: Yup.string()\n          // specify the set of valid values for job type\n          // @see http://bit.ly/yup-mixed-oneOf\n          .oneOf(\n            ['designer', 'development', 'product', 'other'],\n            'Invalid Job Type'\n          )\n          .required('Required'),\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n    >\n      <Form>\n        <MyTextInput label=\"Description\" name=\"description\" type=\"text\" />\n\n        <MyTextInput\n          label=\"Amount\"\n          name=\"amount\"\n          type=\"text\"\n          placeholder=\"0,00\"\n        />\n      </Form>\n    </Formik>\n  );\n};\n\nexport default AddTransaction;\n"]},"metadata":{},"sourceType":"module"}