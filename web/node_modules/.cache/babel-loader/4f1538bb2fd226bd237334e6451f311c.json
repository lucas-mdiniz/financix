{"ast":null,"code":"import _objectSpread from \"/home/lucas/Public/repos/financix/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/lucas/Public/repos/financix/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lucas/Public/repos/financix/src/pages/Transactions/index.jsx\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { FaCheck, FaTimes, FaMinus, FaPlus, FaTrashAlt } from 'react-icons/fa';\nimport PageTitle from '../../components/PageTitle';\nimport Card from '../../containers/Card';\nimport api from '../../services/api';\nimport { TransactionItem, TransactionStatus, TransactionTitle, TransactionValue, TransactionDate, TransactionsTotals, BalanceColumn, BalanceColumnData, StyledToggleButton, BalanceDetails, BalanceValue, PaidButton, DeleteButton } from './styles';\nimport { Button } from '../../components/Button';\nimport Modal from '../../containers/Modal';\nimport AddTransaction from '../../components/AddTransaction';\nimport { TransactionsContext } from '../../contexts/TransactionContext';\nimport totals from '../../backend/totals';\n\nconst Transactions = () => {\n  const _useContext = useContext(TransactionsContext),\n        _useContext2 = _slicedToArray(_useContext, 2),\n        transactions = _useContext2[0],\n        setTransactions = _useContext2[1];\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        modalOpen = _useState2[0],\n        setModalOpen = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        showBalanceDetails = _useState4[0],\n        setShowBalanceDetails = _useState4[1];\n\n  const _totals = totals(transactions),\n        income = _totals.income,\n        predictedIncome = _totals.predictedIncome,\n        expenses = _totals.expenses,\n        predictedExpenses = _totals.predictedExpenses,\n        balance = _totals.balance,\n        predictedBalance = _totals.predictedBalance;\n\n  useEffect(() => {\n    async function getTransactions() {\n      try {\n        const response = await api.get('/transactions');\n        setTransactions(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    getTransactions();\n  }, []);\n\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  const handleDelete = id => {\n    const newTransactions = transactions.map(transaction => id !== transaction.id);\n    api.delete(`/transactions/${id}`).then(() => {\n      setTransactions(newTransactions);\n    }).catch(error => console.log(error));\n  };\n\n  const handlePaidButton = id => {\n    const newTransactions = transactions.map(transaction => transaction.id === id ? _objectSpread({}, transaction, {\n      paid: !transaction.paid\n    }) : transaction);\n\n    const _newTransactions$filt = newTransactions.filter(transaction => transaction.id === id),\n          _newTransactions$filt2 = _slicedToArray(_newTransactions$filt, 1),\n          newTransaction = _newTransactions$filt2[0];\n\n    api.put(`/transactions/${id}`, newTransaction).then(() => {\n      setTransactions(newTransactions);\n    }).catch(error => console.log(error));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(PageTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Transactions\"), React.createElement(Card, {\n    backgroundColor: \"#fff\",\n    borderRadius: \"10px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, transactions.map(transaction => {\n    return React.createElement(TransactionItem, {\n      key: transaction.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(TransactionDate, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, new Date(transaction.date).toLocaleDateString()), React.createElement(TransactionTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, transaction.title), React.createElement(TransactionStatus, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(PaidButton, {\n      onClick: () => {\n        handlePaidButton(transaction.id);\n      },\n      status: transaction.paid ? 1 : 0,\n      as: transaction.paid ? FaCheck : FaTimes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(TransactionValue, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, transaction.type === 'expense' ? `-${transaction.amount}` : transaction.amount), React.createElement(DeleteButton, {\n      as: FaTrashAlt,\n      onClick: () => {\n        handleDelete(transaction.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }));\n  })), React.createElement(TransactionsTotals, {\n    as: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Balance\")), React.createElement(BalanceColumn, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(BalanceColumnData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, showBalanceDetails && React.createElement(BalanceDetails, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Income: \"), React.createElement(BalanceValue, {\n    color: \"#08b34f\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, income)), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"Predicted income: \"), React.createElement(BalanceValue, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, predictedIncome)), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Expenses: \"), React.createElement(BalanceValue, {\n    color: \"#e20000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, expenses)), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"Predicted expenses: \"), React.createElement(BalanceValue, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, predictedExpenses))), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"Balance: \"), React.createElement(BalanceValue, {\n    color: \"#ff8300\",\n    fontWeight: \"bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, balance)), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"Predicted balance: \"), React.createElement(BalanceValue, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, predictedBalance))), React.createElement(StyledToggleButton, {\n    as: showBalanceDetails ? FaMinus : FaPlus,\n    onClick: () => {\n      setShowBalanceDetails(!showBalanceDetails);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  })))), React.createElement(Button, {\n    onClick: () => setModalOpen(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"Add Transaction\"), React.createElement(Modal, {\n    open: modalOpen,\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(AddTransaction, {\n    modalClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  })));\n};\n\nexport default Transactions;","map":{"version":3,"sources":["/home/lucas/Public/repos/financix/src/pages/Transactions/index.jsx"],"names":["React","useState","useEffect","useContext","FaCheck","FaTimes","FaMinus","FaPlus","FaTrashAlt","PageTitle","Card","api","TransactionItem","TransactionStatus","TransactionTitle","TransactionValue","TransactionDate","TransactionsTotals","BalanceColumn","BalanceColumnData","StyledToggleButton","BalanceDetails","BalanceValue","PaidButton","DeleteButton","Button","Modal","AddTransaction","TransactionsContext","totals","Transactions","transactions","setTransactions","modalOpen","setModalOpen","showBalanceDetails","setShowBalanceDetails","income","predictedIncome","expenses","predictedExpenses","balance","predictedBalance","getTransactions","response","get","data","error","console","handleClose","handleDelete","id","newTransactions","map","transaction","delete","then","catch","log","handlePaidButton","paid","filter","newTransaction","put","Date","date","toLocaleDateString","title","type","amount"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { FaCheck, FaTimes, FaMinus, FaPlus, FaTrashAlt } from 'react-icons/fa';\nimport PageTitle from '../../components/PageTitle';\nimport Card from '../../containers/Card';\nimport api from '../../services/api';\nimport {\n  TransactionItem,\n  TransactionStatus,\n  TransactionTitle,\n  TransactionValue,\n  TransactionDate,\n  TransactionsTotals,\n  BalanceColumn,\n  BalanceColumnData,\n  StyledToggleButton,\n  BalanceDetails,\n  BalanceValue,\n  PaidButton,\n  DeleteButton,\n} from './styles';\nimport { Button } from '../../components/Button';\nimport Modal from '../../containers/Modal';\nimport AddTransaction from '../../components/AddTransaction';\nimport { TransactionsContext } from '../../contexts/TransactionContext';\nimport totals from '../../backend/totals';\n\nconst Transactions = () => {\n  const [transactions, setTransactions] = useContext(TransactionsContext);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [showBalanceDetails, setShowBalanceDetails] = useState(false);\n\n  const {\n    income,\n    predictedIncome,\n    expenses,\n    predictedExpenses,\n    balance,\n    predictedBalance,\n  } = totals(transactions);\n\n  useEffect(() => {\n    async function getTransactions() {\n      try {\n        const response = await api.get('/transactions');\n        setTransactions(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    getTransactions();\n  }, []);\n\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  const handleDelete = id => {\n    const newTransactions = transactions.map(\n      transaction => id !== transaction.id\n    );\n\n    api\n      .delete(`/transactions/${id}`)\n      .then(() => {\n        setTransactions(newTransactions);\n      })\n      .catch(error => console.log(error));\n  };\n\n  const handlePaidButton = id => {\n    const newTransactions = transactions.map(transaction =>\n      transaction.id === id\n        ? { ...transaction, paid: !transaction.paid }\n        : transaction\n    );\n\n    const [newTransaction] = newTransactions.filter(\n      transaction => transaction.id === id\n    );\n\n    api\n      .put(`/transactions/${id}`, newTransaction)\n      .then(() => {\n        setTransactions(newTransactions);\n      })\n      .catch(error => console.log(error));\n  };\n\n  return (\n    <>\n      <PageTitle>Transactions</PageTitle>\n      <Card backgroundColor=\"#fff\" borderRadius=\"10px\">\n        <ul>\n          {transactions.map(transaction => {\n            return (\n              <TransactionItem key={transaction.id}>\n                <TransactionDate>\n                  {new Date(transaction.date).toLocaleDateString()}\n                </TransactionDate>\n                <TransactionTitle>{transaction.title}</TransactionTitle>\n                <TransactionStatus>\n                  <PaidButton\n                    onClick={() => {\n                      handlePaidButton(transaction.id);\n                    }}\n                    status={transaction.paid ? 1 : 0}\n                    as={transaction.paid ? FaCheck : FaTimes}\n                  />\n                </TransactionStatus>\n                <TransactionValue>\n                  {transaction.type === 'expense'\n                    ? `-${transaction.amount}`\n                    : transaction.amount}\n                </TransactionValue>\n                <DeleteButton\n                  as={FaTrashAlt}\n                  onClick={() => {\n                    handleDelete(transaction.id);\n                  }}\n                />\n              </TransactionItem>\n            );\n          })}\n        </ul>\n        <TransactionsTotals as=\"div\">\n          <div>\n            <h3>Balance</h3>\n          </div>\n          <BalanceColumn>\n            <BalanceColumnData>\n              {showBalanceDetails && (\n                <BalanceDetails>\n                  <span>\n                    <span>Income: </span>\n                    <BalanceValue color=\"#08b34f\">{income}</BalanceValue>\n                  </span>\n                  <span>\n                    <span>Predicted income: </span>\n                    <BalanceValue>{predictedIncome}</BalanceValue>\n                  </span>\n                  <span>\n                    <span>Expenses: </span>\n                    <BalanceValue color=\"#e20000\">{expenses}</BalanceValue>\n                  </span>\n                  <span>\n                    <span>Predicted expenses: </span>\n                    <BalanceValue>{predictedExpenses}</BalanceValue>\n                  </span>\n                </BalanceDetails>\n              )}\n              <span>\n                <span>Balance: </span>\n                <BalanceValue color=\"#ff8300\" fontWeight=\"bold\">\n                  {balance}\n                </BalanceValue>\n              </span>\n              <span>\n                <span>Predicted balance: </span>\n                <BalanceValue>{predictedBalance}</BalanceValue>\n              </span>\n            </BalanceColumnData>\n            <StyledToggleButton\n              as={showBalanceDetails ? FaMinus : FaPlus}\n              onClick={() => {\n                setShowBalanceDetails(!showBalanceDetails);\n              }}\n            />\n          </BalanceColumn>\n        </TransactionsTotals>\n      </Card>\n      <Button onClick={() => setModalOpen(true)}>Add Transaction</Button>\n      <Modal open={modalOpen} onClose={handleClose}>\n        <AddTransaction modalClose={handleClose} />\n      </Modal>\n    </>\n  );\n};\n\nexport default Transactions;\n"]},"metadata":{},"sourceType":"module"}