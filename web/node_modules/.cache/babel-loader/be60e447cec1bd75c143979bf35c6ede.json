{"ast":null,"code":"import _slicedToArray from \"/home/lucas/Public/repos/financix/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lucas/Public/repos/financix/src/pages/Transactions/index.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { FaCheck, FaTimes } from 'react-icons/fa';\nimport PageTitle from '../../components/PageTitle';\nimport Card from '../../containers/Card';\nimport api from '../../services/api';\nimport { TransactionItem, TransactionStatus, TransactionTitle, TransactionValue, TransactionDate } from './styles';\nimport { Button } from '../../components/Button';\nimport Modal from '../../containers/Modal';\nimport AddTransaction from '../../components/AddTransaction';\n\nconst Transactions = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        transactions = _useState2[0],\n        setTransactions = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        modalOpen = _useState4[0],\n        setModalOpen = _useState4[1];\n\n  useEffect(() => {\n    async function getTransactions() {\n      try {\n        const response = await api.get('/transactions');\n        setTransactions(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    getTransactions();\n  }, []);\n\n  const handleClose = e => {\n    if (e.target === e.currentTarget) {\n      console.log(e);\n      setModalOpen(false);\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(PageTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Transactions\"), React.createElement(Card, {\n    backgroundColor: \"#fff\",\n    borderRadius: \"10px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, transactions.map(transaction => {\n    return React.createElement(TransactionItem, {\n      key: transaction.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(TransactionDate, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, transaction.date), React.createElement(TransactionTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, transaction.title), React.createElement(TransactionStatus, {\n      status: transaction.paid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, transaction.paid ? React.createElement(FaCheck, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }) : React.createElement(FaTimes, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    })), React.createElement(TransactionValue, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, transaction.amount));\n  }))), React.createElement(Button, {\n    onClick: () => setModalOpen(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Add Transaction\"), React.createElement(Modal, {\n    open: modalOpen,\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(AddTransaction, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })));\n};\n\nexport default Transactions;","map":{"version":3,"sources":["/home/lucas/Public/repos/financix/src/pages/Transactions/index.jsx"],"names":["React","useState","useEffect","FaCheck","FaTimes","PageTitle","Card","api","TransactionItem","TransactionStatus","TransactionTitle","TransactionValue","TransactionDate","Button","Modal","AddTransaction","Transactions","transactions","setTransactions","modalOpen","setModalOpen","getTransactions","response","get","data","error","console","handleClose","e","target","currentTarget","log","map","transaction","id","date","title","paid","amount"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { FaCheck, FaTimes } from 'react-icons/fa';\nimport PageTitle from '../../components/PageTitle';\nimport Card from '../../containers/Card';\nimport api from '../../services/api';\nimport {\n  TransactionItem,\n  TransactionStatus,\n  TransactionTitle,\n  TransactionValue,\n  TransactionDate,\n} from './styles';\nimport { Button } from '../../components/Button';\nimport Modal from '../../containers/Modal';\nimport AddTransaction from '../../components/AddTransaction';\n\nconst Transactions = () => {\n  const [transactions, setTransactions] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    async function getTransactions() {\n      try {\n        const response = await api.get('/transactions');\n        setTransactions(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    getTransactions();\n  }, []);\n\n  const handleClose = e => {\n    if (e.target === e.currentTarget) {\n      console.log(e);\n      setModalOpen(false);\n    }\n  };\n\n  return (\n    <>\n      <PageTitle>Transactions</PageTitle>\n      <Card backgroundColor=\"#fff\" borderRadius=\"10px\">\n        <ul>\n          {transactions.map(transaction => {\n            return (\n              <TransactionItem key={transaction.id}>\n                <TransactionDate>{transaction.date}</TransactionDate>\n                <TransactionTitle>{transaction.title}</TransactionTitle>\n                <TransactionStatus status={transaction.paid}>\n                  {transaction.paid ? <FaCheck /> : <FaTimes />}\n                </TransactionStatus>\n                <TransactionValue>{transaction.amount}</TransactionValue>\n              </TransactionItem>\n            );\n          })}\n        </ul>\n      </Card>\n      <Button onClick={() => setModalOpen(true)}>Add Transaction</Button>\n      <Modal open={modalOpen} onClose={handleClose}>\n        <AddTransaction />\n      </Modal>\n    </>\n  );\n};\n\nexport default Transactions;\n"]},"metadata":{},"sourceType":"module"}