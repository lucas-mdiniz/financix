{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Public/repos/financix/src/components/Graphs/Home/index.jsx\";\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst ReportGraph = () => {\n  const graphRef = useRef(null);\n  const dataset = [{\n    name: 'bar',\n    value: 300,\n    type: 'expense'\n  }, {\n    name: 'shopping',\n    value: 400,\n    type: 'earning'\n  }, {\n    name: 'party',\n    value: 200,\n    type: 'earning'\n  }];\n  useEffect(() => {\n    const g = d3.select(graphRef.current);\n\n    const xValue = d => d.value;\n\n    const yValue = d => d.name;\n\n    const yScale = d3.scaleLinear().domain([0, d3.max(dataset, yValue)]).range([0, 500]);\n    const xScale = d3.scaleBand().domain(dataset.map(xValue)).range([0, 500]).padding(0.1);\n    g.append('g').call(d3.axisLeft(xScale));\n    g.append('g').call(d3.axisBottom(yScale)).attr('transform', `translate(0, ${500})`);\n    g.attr('transform', `translate(${margin.left}, ${margin.top})`);\n    g.selectAll('rect').data(dataset).enter().append('rect').attr('x', d => xScale(xValue(d))).attr('heigth', d => yScale(yValue(d))).attr('width', xScale.bandwidth());\n  });\n  return React.createElement(\"svg\", {\n    height: \"500\",\n    width: \"500\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    ref: graphRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }));\n};\n\nexport default ReportGraph;","map":{"version":3,"sources":["/home/lucas/Public/repos/financix/src/components/Graphs/Home/index.jsx"],"names":["React","useRef","useEffect","d3","ReportGraph","graphRef","dataset","name","value","type","g","select","current","xValue","d","yValue","yScale","scaleLinear","domain","max","range","xScale","scaleBand","map","padding","append","call","axisLeft","axisBottom","attr","margin","left","top","selectAll","data","enter","bandwidth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,QAAQ,GAAGJ,MAAM,CAAC,IAAD,CAAvB;AAEA,QAAMK,OAAO,GAAG,CACd;AAAEC,IAAAA,IAAI,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE,GAAtB;AAA2BC,IAAAA,IAAI,EAAE;AAAjC,GADc,EAEd;AAAEF,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,KAAK,EAAE,GAA3B;AAAgCC,IAAAA,IAAI,EAAE;AAAtC,GAFc,EAGd;AAAEF,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAE,GAAxB;AAA6BC,IAAAA,IAAI,EAAE;AAAnC,GAHc,CAAhB;AAMAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,CAAC,GAAGP,EAAE,CAACQ,MAAH,CAAUN,QAAQ,CAACO,OAAnB,CAAV;;AAEA,UAAMC,MAAM,GAAGC,CAAC,IAAIA,CAAC,CAACN,KAAtB;;AACA,UAAMO,MAAM,GAAGD,CAAC,IAAIA,CAAC,CAACP,IAAtB;;AAEA,UAAMS,MAAM,GAAGb,EAAE,CACdc,WADY,GAEZC,MAFY,CAEL,CAAC,CAAD,EAAIf,EAAE,CAACgB,GAAH,CAAOb,OAAP,EAAgBS,MAAhB,CAAJ,CAFK,EAGZK,KAHY,CAGN,CAAC,CAAD,EAAI,GAAJ,CAHM,CAAf;AAKA,UAAMC,MAAM,GAAGlB,EAAE,CACdmB,SADY,GAEZJ,MAFY,CAELZ,OAAO,CAACiB,GAAR,CAAYV,MAAZ,CAFK,EAGZO,KAHY,CAGN,CAAC,CAAD,EAAI,GAAJ,CAHM,EAIZI,OAJY,CAIJ,GAJI,CAAf;AAMAd,IAAAA,CAAC,CAACe,MAAF,CAAS,GAAT,EAAcC,IAAd,CAAmBvB,EAAE,CAACwB,QAAH,CAAYN,MAAZ,CAAnB;AACAX,IAAAA,CAAC,CAACe,MAAF,CAAS,GAAT,EACGC,IADH,CACQvB,EAAE,CAACyB,UAAH,CAAcZ,MAAd,CADR,EAEGa,IAFH,CAEQ,WAFR,EAEsB,gBAAe,GAAI,GAFzC;AAIAnB,IAAAA,CAAC,CAACmB,IAAF,CAAO,WAAP,EAAqB,aAAYC,MAAM,CAACC,IAAK,KAAID,MAAM,CAACE,GAAI,GAA5D;AAEAtB,IAAAA,CAAC,CAACuB,SAAF,CAAY,MAAZ,EACGC,IADH,CACQ5B,OADR,EAEG6B,KAFH,GAGGV,MAHH,CAGU,MAHV,EAIGI,IAJH,CAIQ,GAJR,EAIaf,CAAC,IAAIO,MAAM,CAACR,MAAM,CAACC,CAAD,CAAP,CAJxB,EAKGe,IALH,CAKQ,QALR,EAKkBf,CAAC,IAAIE,MAAM,CAACD,MAAM,CAACD,CAAD,CAAP,CAL7B,EAMGe,IANH,CAMQ,OANR,EAMiBR,MAAM,CAACe,SAAP,EANjB;AAOD,GA/BQ,CAAT;AAiCA,SACE;AAAK,IAAA,MAAM,EAAC,KAAZ;AAAkB,IAAA,KAAK,EAAC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,GAAG,EAAE/B,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CA/CD;;AAiDA,eAAeD,WAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst ReportGraph = () => {\n  const graphRef = useRef(null);\n\n  const dataset = [\n    { name: 'bar', value: 300, type: 'expense' },\n    { name: 'shopping', value: 400, type: 'earning' },\n    { name: 'party', value: 200, type: 'earning' },\n  ];\n\n  useEffect(() => {\n    const g = d3.select(graphRef.current);\n\n    const xValue = d => d.value;\n    const yValue = d => d.name;\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, d3.max(dataset, yValue)])\n      .range([0, 500]);\n\n    const xScale = d3\n      .scaleBand()\n      .domain(dataset.map(xValue))\n      .range([0, 500])\n      .padding(0.1);\n\n    g.append('g').call(d3.axisLeft(xScale));\n    g.append('g')\n      .call(d3.axisBottom(yScale))\n      .attr('transform', `translate(0, ${500})`);\n\n    g.attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n    g.selectAll('rect')\n      .data(dataset)\n      .enter()\n      .append('rect')\n      .attr('x', d => xScale(xValue(d)))\n      .attr('heigth', d => yScale(yValue(d)))\n      .attr('width', xScale.bandwidth());\n  });\n\n  return (\n    <svg height=\"500\" width=\"500\">\n      <g ref={graphRef} />\n    </svg>\n  );\n};\n\nexport default ReportGraph;\n"]},"metadata":{},"sourceType":"module"}