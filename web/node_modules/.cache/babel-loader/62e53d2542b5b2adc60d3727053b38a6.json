{"ast":null,"code":"import _slicedToArray from \"/home/lucas/Public/repos/financix/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/lucas/Public/repos/financix/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/lucas/Public/repos/financix/src/pages/Transactions/index.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { FaCheck, FaTimes } from 'react-icons/fa';\nimport { Formik, Form, useField } from 'formik';\nimport * as Yup from 'yup';\nimport PageTitle from '../../components/PageTitle';\nimport Card from '../../containers/Card';\nimport api from '../../services/api';\nimport { TransactionItem, TransactionStatus, TransactionTitle, TransactionValue, TransactionDate, ButtonAddTransaction } from './styles';\nimport Modal from '../../containers/Modal';\n\nconst MyTextInput = (_ref) => {\n  let label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const _useField = useField(props),\n        _useField2 = _slicedToArray(_useField, 2),\n        field = _useField2[0],\n        meta = _useField2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, label), React.createElement(\"input\", Object.assign({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })), meta.touched && meta.error ? React.createElement(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nconst Transactions = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        transactions = _useState2[0],\n        setTransactions = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        modalOpen = _useState4[0],\n        setModalOpen = _useState4[1];\n\n  useEffect(() => {\n    async function getTransactions() {\n      try {\n        const response = await api.get('/transactions');\n        setTransactions(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    getTransactions();\n  }, []);\n\n  const handleClose = e => {\n    if (e.target === e.currentTarget) {\n      setModalOpen(false);\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(PageTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Transactions\"), React.createElement(Card, {\n    backgroundColor: \"#fff\",\n    borderRadius: \"10px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, transactions.map(transaction => {\n    return React.createElement(TransactionItem, {\n      key: transaction.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(TransactionDate, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, transaction.date), React.createElement(TransactionTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, transaction.title), React.createElement(TransactionStatus, {\n      status: transaction.paid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, transaction.paid ? React.createElement(FaCheck, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }) : React.createElement(FaTimes, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })), React.createElement(TransactionValue, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, transaction.value));\n  }))), React.createElement(ButtonAddTransaction, {\n    onClick: () => setModalOpen(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Add Transaction\"));\n};\n\nexport default Transactions;","map":{"version":3,"sources":["/home/lucas/Public/repos/financix/src/pages/Transactions/index.jsx"],"names":["React","useState","useEffect","FaCheck","FaTimes","Formik","Form","useField","Yup","PageTitle","Card","api","TransactionItem","TransactionStatus","TransactionTitle","TransactionValue","TransactionDate","ButtonAddTransaction","Modal","MyTextInput","label","props","field","meta","id","name","touched","error","Transactions","transactions","setTransactions","modalOpen","setModalOpen","getTransactions","response","get","data","console","handleClose","e","target","currentTarget","map","transaction","date","title","paid","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { FaCheck, FaTimes } from 'react-icons/fa';\nimport { Formik, Form, useField } from 'formik';\nimport * as Yup from 'yup';\nimport PageTitle from '../../components/PageTitle';\nimport Card from '../../containers/Card';\nimport api from '../../services/api';\nimport {\n  TransactionItem,\n  TransactionStatus,\n  TransactionTitle,\n  TransactionValue,\n  TransactionDate,\n  ButtonAddTransaction,\n} from './styles';\nimport Modal from '../../containers/Modal';\n\nconst MyTextInput = ({ label, ...props }) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input className=\"text-input\" {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nconst Transactions = () => {\n  const [transactions, setTransactions] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    async function getTransactions() {\n      try {\n        const response = await api.get('/transactions');\n        setTransactions(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    getTransactions();\n  }, []);\n\n  const handleClose = e => {\n    if (e.target === e.currentTarget) {\n      setModalOpen(false);\n    }\n  };\n\n  return (\n    <>\n      <PageTitle>Transactions</PageTitle>\n      <Card backgroundColor=\"#fff\" borderRadius=\"10px\">\n        <ul>\n          {transactions.map(transaction => {\n            return (\n              <TransactionItem key={transaction.id}>\n                <TransactionDate>{transaction.date}</TransactionDate>\n                <TransactionTitle>{transaction.title}</TransactionTitle>\n                <TransactionStatus status={transaction.paid}>\n                  {transaction.paid ? <FaCheck /> : <FaTimes />}\n                </TransactionStatus>\n                <TransactionValue>{transaction.value}</TransactionValue>\n              </TransactionItem>\n            );\n          })}\n        </ul>\n      </Card>\n      <ButtonAddTransaction onClick={() => setModalOpen(true)}>\n        Add Transaction\n      </ButtonAddTransaction>\n    </>\n  );\n};\n\nexport default Transactions;\n"]},"metadata":{},"sourceType":"module"}