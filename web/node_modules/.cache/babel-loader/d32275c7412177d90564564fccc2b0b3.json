{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Public/repos/financix/src/components/Graphs/Pie/index.jsx\";\nimport React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport 'tippy.js/dist/tippy.css';\nimport * as d3 from 'd3';\nimport tippy, { followCursor } from 'tippy.js';\nimport { LegendColorBox, LegendTitle, LegendPercentage, LegendItem, PieWrapper } from './styles';\n\nconst Pie = ({\n  data,\n  outerRadius,\n  innerRadius = 0,\n  width,\n  height,\n  legend = false,\n  colors\n}) => {\n  const graphRef = useRef(null);\n  const total = data.reduce((accumulator, currentData) => ({\n    value: accumulator.value + currentData.value\n  }));\n  const arcs = d3.pie().value(value => value.value)(data).sort((a, b) => a.data.name.localeCompare(b.data.name));\n  const pieRadius = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius);\n  useEffect(() => {\n    const graphContainer = d3.select(graphRef.current);\n    const arc = graphContainer.selectAll('path').data(arcs, d => d.data.id);\n    arc.join(enter => enter.append('path').attr('fill', d => {\n      return colors[d.index];\n    }).attr('stroke', 'white').attr('d', pieRadius), update => update.transition().duration(750)).enter().append('path').merge(arc).transition().duration(750).attr('fill', d => {\n      return colors[d.index];\n    }).attr('stroke', 'white').attr('d', pieRadius);\n    /*.each(function creatTolltip(d) {\n        const pathReference = d3.select(this)._groups[0][0];\n         tippy(pathReference, {\n          content: `${d.data.name}: ${(\n            (d.data.value / total.value) *\n            100\n          ).toFixed(2)}%`,\n          theme: 'light',\n          arrow: false,\n          followCursor: true,\n          plugins: [followCursor],\n        });\n      })*/\n\n    const update = () => {\n      arc.exit().remove();\n    };\n\n    update();\n  }, [pieRadius, arcs, colors, total.value]);\n  return React.createElement(PieWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    ref: graphRef,\n    transform: `translate(${outerRadius} ${outerRadius})`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }))), legend && React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, arcs.map(currentArc => React.createElement(LegendItem, {\n    key: currentArc.data.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(LegendColorBox, {\n    color: colors[currentArc.index],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(LegendTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, currentArc.data.name, \": \"), React.createElement(LegendPercentage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, currentArc.data.value)))));\n};\n\nPie.defaultProps = {\n  legend: false,\n  innerRadius: 0\n};\nPie.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  outerRadius: PropTypes.number.isRequired,\n  innerRadius: PropTypes.number,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  legend: PropTypes.bool,\n  colors: PropTypes.arrayOf(PropTypes.string).isRequired\n};\nexport default Pie;","map":{"version":3,"sources":["/home/lucas/Public/repos/financix/src/components/Graphs/Pie/index.jsx"],"names":["React","useRef","useEffect","PropTypes","d3","tippy","followCursor","LegendColorBox","LegendTitle","LegendPercentage","LegendItem","PieWrapper","Pie","data","outerRadius","innerRadius","width","height","legend","colors","graphRef","total","reduce","accumulator","currentData","value","arcs","pie","sort","a","b","name","localeCompare","pieRadius","arc","graphContainer","select","current","selectAll","d","id","join","enter","append","attr","index","update","transition","duration","merge","exit","remove","map","currentArc","defaultProps","propTypes","arrayOf","object","isRequired","number","bool","string"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport 'tippy.js/dist/tippy.css';\nimport * as d3 from 'd3';\nimport tippy, { followCursor } from 'tippy.js';\nimport {\n  LegendColorBox,\n  LegendTitle,\n  LegendPercentage,\n  LegendItem,\n  PieWrapper,\n} from './styles';\n\nconst Pie = ({\n  data,\n  outerRadius,\n  innerRadius = 0,\n  width,\n  height,\n  legend = false,\n  colors,\n}) => {\n  const graphRef = useRef(null);\n\n  const total = data.reduce((accumulator, currentData) => ({\n    value: accumulator.value + currentData.value,\n  }));\n\n  const arcs = d3\n    .pie()\n    .value(value => value.value)(data)\n    .sort((a, b) => a.data.name.localeCompare(b.data.name));\n\n  const pieRadius = d3\n    .arc()\n    .innerRadius(innerRadius)\n    .outerRadius(outerRadius);\n\n  useEffect(() => {\n    const graphContainer = d3.select(graphRef.current);\n\n    const arc = graphContainer.selectAll('path').data(arcs, d => d.data.id);\n\n    arc\n      .join(\n        enter =>\n          enter\n            .append('path')\n            .attr('fill', d => {\n              return colors[d.index];\n            })\n            .attr('stroke', 'white')\n            .attr('d', pieRadius),\n        update => update.transition().duration(750)\n      )\n      .enter()\n      .append('path')\n      .merge(arc)\n      .transition()\n      .duration(750)\n      .attr('fill', d => {\n        return colors[d.index];\n      })\n      .attr('stroke', 'white')\n      .attr('d', pieRadius);\n    /*.each(function creatTolltip(d) {\n        const pathReference = d3.select(this)._groups[0][0];\n\n        tippy(pathReference, {\n          content: `${d.data.name}: ${(\n            (d.data.value / total.value) *\n            100\n          ).toFixed(2)}%`,\n          theme: 'light',\n          arrow: false,\n          followCursor: true,\n          plugins: [followCursor],\n        });\n      })*/ const update = () => {\n      arc.exit().remove();\n    };\n\n    update();\n  }, [pieRadius, arcs, colors, total.value]);\n\n  return (\n    <PieWrapper>\n      <div>\n        <svg width={width} height={height}>\n          <g\n            ref={graphRef}\n            transform={`translate(${outerRadius} ${outerRadius})`}\n          />\n        </svg>\n      </div>\n      {legend && (\n        <ul>\n          {arcs.map(currentArc => (\n            <LegendItem key={currentArc.data.id}>\n              <LegendColorBox color={colors[currentArc.index]} />\n              <LegendTitle>{currentArc.data.name}: </LegendTitle>\n              <LegendPercentage>{currentArc.data.value}</LegendPercentage>\n            </LegendItem>\n          ))}\n        </ul>\n      )}\n    </PieWrapper>\n  );\n};\n\nPie.defaultProps = {\n  legend: false,\n  innerRadius: 0,\n};\n\nPie.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  outerRadius: PropTypes.number.isRequired,\n  innerRadius: PropTypes.number,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  legend: PropTypes.bool,\n  colors: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Pie;\n"]},"metadata":{},"sourceType":"module"}