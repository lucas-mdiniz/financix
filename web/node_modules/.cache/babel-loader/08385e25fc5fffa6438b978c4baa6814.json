{"ast":null,"code":"import parseCurrencyFloat from '../utils/parseCurrencyFloat';\nexport default (transactions => {\n  const date = new Date();\n  let income = 0;\n  let expenses = 0;\n  let predictedIncome = 0;\n  let predictedExpenses = 0; // vou filtrar por pago ou n e add, depois fazer o post\n\n  transactions.forEach(transaction => {\n    if (transaction.type === 'expense') {\n      if (transaction.paid) {\n        expenses += parseCurrencyFloat(transaction.amount);\n      } else {\n        predictedExpenses += parseCurrencyFloat(transaction.amount);\n      }\n    } else if (transaction.type === 'income') {\n      if (transaction.paid) {\n        income += parseCurrencyFloat(transaction.amount);\n      } else {\n        predictedIncome += parseCurrencyFloat(transaction.amount);\n      }\n    }\n  });\n  console.log(income);\n  console.log(predictedIncome);\n  console.log(expenses);\n  console.log(predictedExpenses);\n});","map":{"version":3,"sources":["/home/lucas/Public/repos/financix/src/backend/totals.js"],"names":["parseCurrencyFloat","transactions","date","Date","income","expenses","predictedIncome","predictedExpenses","forEach","transaction","type","paid","amount","console","log"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,6BAA/B;AAEA,gBAAeC,YAAY,IAAI;AAC7B,QAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,eAAe,GAAG,CAAtB;AACA,MAAIC,iBAAiB,GAAG,CAAxB,CAL6B,CAO7B;;AACAN,EAAAA,YAAY,CAACO,OAAb,CAAqBC,WAAW,IAAI;AAClC,QAAIA,WAAW,CAACC,IAAZ,KAAqB,SAAzB,EAAoC;AAClC,UAAID,WAAW,CAACE,IAAhB,EAAsB;AACpBN,QAAAA,QAAQ,IAAIL,kBAAkB,CAACS,WAAW,CAACG,MAAb,CAA9B;AACD,OAFD,MAEO;AACLL,QAAAA,iBAAiB,IAAIP,kBAAkB,CAACS,WAAW,CAACG,MAAb,CAAvC;AACD;AACF,KAND,MAMO,IAAIH,WAAW,CAACC,IAAZ,KAAqB,QAAzB,EAAmC;AACxC,UAAID,WAAW,CAACE,IAAhB,EAAsB;AACpBP,QAAAA,MAAM,IAAIJ,kBAAkB,CAACS,WAAW,CAACG,MAAb,CAA5B;AACD,OAFD,MAEO;AACLN,QAAAA,eAAe,IAAIN,kBAAkB,CAACS,WAAW,CAACG,MAAb,CAArC;AACD;AACF;AACF,GAdD;AAgBAC,EAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYR,eAAZ;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYP,iBAAZ;AACD,CA5BD","sourcesContent":["import parseCurrencyFloat from '../utils/parseCurrencyFloat';\n\nexport default transactions => {\n  const date = new Date();\n  let income = 0;\n  let expenses = 0;\n  let predictedIncome = 0;\n  let predictedExpenses = 0;\n\n  // vou filtrar por pago ou n e add, depois fazer o post\n  transactions.forEach(transaction => {\n    if (transaction.type === 'expense') {\n      if (transaction.paid) {\n        expenses += parseCurrencyFloat(transaction.amount);\n      } else {\n        predictedExpenses += parseCurrencyFloat(transaction.amount);\n      }\n    } else if (transaction.type === 'income') {\n      if (transaction.paid) {\n        income += parseCurrencyFloat(transaction.amount);\n      } else {\n        predictedIncome += parseCurrencyFloat(transaction.amount);\n      }\n    }\n  });\n\n  console.log(income);\n  console.log(predictedIncome);\n  console.log(expenses);\n  console.log(predictedExpenses);\n};\n"]},"metadata":{},"sourceType":"module"}