{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Public/repos/financix/src/components/Graphs/Home/index.jsx\";\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst ReportGraph = ({\n  width,\n  height,\n  data\n}) => {\n  const graphRef = useRef(null);\n  const dataset = [{\n    name: 'bar',\n    value: 300,\n    type: 'expense'\n  }, {\n    name: 'shopping',\n    value: 400,\n    type: 'earning'\n  }, {\n    name: 'party',\n    value: 200,\n    type: 'earning'\n  }];\n  console.log(data);\n  useEffect(() => {\n    const g = d3.select(graphRef.current);\n    const margin = {\n      top: '20',\n      right: '20',\n      bottom: '20',\n      left: '20'\n    };\n    const innerWidth = width - margin.right - margin.left;\n    const innerHeight = height - margin.top - margin.bottom;\n\n    const yValue = d => d.value;\n\n    const xValue = d => d.name;\n\n    const yScale = d3.scaleLinear().domain([0, d3.max(data, yValue)]).range([0, innerHeight]);\n    const xScale = d3.scaleBand().domain(data.map(xValue)).range([0, innerWidth]).padding(0.1);\n    g.append('g').call(d3.axisBottom(xScale)).attr('transform', `translate(0, ${innerHeight})`);\n    g.attr('transform', `translate(${margin.left}, ${margin.bottom})`);\n    g.selectAll('rect').data(dataset).enter().append('rect').attr('x', d => xScale(xValue(d))).attr('y', d => innerHeight - yScale(yValue(d))).attr('height', d => yScale(yValue(d))).attr('width', xScale.bandwidth()).attr('fill', '#FF7F7F');\n  });\n  return React.createElement(\"svg\", {\n    height: height,\n    width: width,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    ref: graphRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }));\n};\n\nexport default ReportGraph;","map":{"version":3,"sources":["/home/lucas/Public/repos/financix/src/components/Graphs/Home/index.jsx"],"names":["React","useRef","useEffect","d3","ReportGraph","width","height","data","graphRef","dataset","name","value","type","console","log","g","select","current","margin","top","right","bottom","left","innerWidth","innerHeight","yValue","d","xValue","yScale","scaleLinear","domain","max","range","xScale","scaleBand","map","padding","append","call","axisBottom","attr","selectAll","enter","bandwidth"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst ReportGraph = ({ width, height, data }) => {\n  const graphRef = useRef(null);\n\n  const dataset = [\n    { name: 'bar', value: 300, type: 'expense' },\n    { name: 'shopping', value: 400, type: 'earning' },\n    { name: 'party', value: 200, type: 'earning' },\n  ];\n\n  console.log(data);\n  useEffect(() => {\n    const g = d3.select(graphRef.current);\n    const margin = { top: '20', right: '20', bottom: '20', left: '20' };\n    const innerWidth = width - margin.right - margin.left;\n    const innerHeight = height - margin.top - margin.bottom;\n\n    const yValue = d => d.value;\n    const xValue = d => d.name;\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, d3.max(data, yValue)])\n      .range([0, innerHeight]);\n\n    const xScale = d3\n      .scaleBand()\n      .domain(data.map(xValue))\n      .range([0, innerWidth])\n      .padding(0.1);\n\n    g.append('g')\n      .call(d3.axisBottom(xScale))\n      .attr('transform', `translate(0, ${innerHeight})`);\n\n    g.attr('transform', `translate(${margin.left}, ${margin.bottom})`);\n\n    g.selectAll('rect')\n      .data(dataset)\n      .enter()\n      .append('rect')\n      .attr('x', d => xScale(xValue(d)))\n      .attr('y', d => innerHeight - yScale(yValue(d)))\n      .attr('height', d => yScale(yValue(d)))\n      .attr('width', xScale.bandwidth())\n      .attr('fill', '#FF7F7F');\n  });\n\n  return (\n    <svg height={height} width={width}>\n      <g ref={graphRef} />\n    </svg>\n  );\n};\n\nexport default ReportGraph;\n"]},"metadata":{},"sourceType":"module"}