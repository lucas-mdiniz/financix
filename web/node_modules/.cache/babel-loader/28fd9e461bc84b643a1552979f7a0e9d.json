{"ast":null,"code":"import parseCurrencyFloat from '../utils/parseCurrencyFloat';\nexport default (transactions => {\n  let income = 0;\n  let expenses = 0;\n  let predictedIncome = 0;\n  let predictedExpenses = 0; // vou filtrar por pago ou n e add, depois fazer o post\n\n  transactions.forEach(transaction => {\n    if (transaction.type === 'expense') {\n      if (transaction.paid) {\n        expenses += parseCurrencyFloat(transaction.amount);\n      } else {\n        predictedExpenses += parseCurrencyFloat(transaction.amount);\n      }\n    } else if (transaction.type === 'income') {\n      if (transaction.paid) {\n        income += parseCurrencyFloat(transaction.amount);\n      } else {\n        predictedIncome += parseCurrencyFloat(transaction.amount);\n      }\n    }\n  });\n  predictedExpenses += expenses;\n  predictedIncome += income;\n  const balance = income - expenses;\n  const predictedBalance = predictedIncome - predictedExpenses;\n  balance.toFixed(2);\n  return {\n    income,\n    predictedIncome,\n    expenses,\n    predictedExpenses,\n    balance,\n    predictedBalance\n  };\n});","map":{"version":3,"sources":["/home/lucas/Public/repos/financix/src/backend/totals.js"],"names":["parseCurrencyFloat","transactions","income","expenses","predictedIncome","predictedExpenses","forEach","transaction","type","paid","amount","balance","predictedBalance","toFixed"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,6BAA/B;AAEA,gBAAeC,YAAY,IAAI;AAC7B,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,eAAe,GAAG,CAAtB;AACA,MAAIC,iBAAiB,GAAG,CAAxB,CAJ6B,CAM7B;;AACAJ,EAAAA,YAAY,CAACK,OAAb,CAAqBC,WAAW,IAAI;AAClC,QAAIA,WAAW,CAACC,IAAZ,KAAqB,SAAzB,EAAoC;AAClC,UAAID,WAAW,CAACE,IAAhB,EAAsB;AACpBN,QAAAA,QAAQ,IAAIH,kBAAkB,CAACO,WAAW,CAACG,MAAb,CAA9B;AACD,OAFD,MAEO;AACLL,QAAAA,iBAAiB,IAAIL,kBAAkB,CAACO,WAAW,CAACG,MAAb,CAAvC;AACD;AACF,KAND,MAMO,IAAIH,WAAW,CAACC,IAAZ,KAAqB,QAAzB,EAAmC;AACxC,UAAID,WAAW,CAACE,IAAhB,EAAsB;AACpBP,QAAAA,MAAM,IAAIF,kBAAkB,CAACO,WAAW,CAACG,MAAb,CAA5B;AACD,OAFD,MAEO;AACLN,QAAAA,eAAe,IAAIJ,kBAAkB,CAACO,WAAW,CAACG,MAAb,CAArC;AACD;AACF;AACF,GAdD;AAgBAL,EAAAA,iBAAiB,IAAIF,QAArB;AACAC,EAAAA,eAAe,IAAIF,MAAnB;AACA,QAAMS,OAAO,GAAGT,MAAM,GAAGC,QAAzB;AACA,QAAMS,gBAAgB,GAAGR,eAAe,GAAGC,iBAA3C;AAEAM,EAAAA,OAAO,CAACE,OAAR,CAAgB,CAAhB;AAEA,SAAO;AACLX,IAAAA,MADK;AAELE,IAAAA,eAFK;AAGLD,IAAAA,QAHK;AAILE,IAAAA,iBAJK;AAKLM,IAAAA,OALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CAtCD","sourcesContent":["import parseCurrencyFloat from '../utils/parseCurrencyFloat';\n\nexport default transactions => {\n  let income = 0;\n  let expenses = 0;\n  let predictedIncome = 0;\n  let predictedExpenses = 0;\n\n  // vou filtrar por pago ou n e add, depois fazer o post\n  transactions.forEach(transaction => {\n    if (transaction.type === 'expense') {\n      if (transaction.paid) {\n        expenses += parseCurrencyFloat(transaction.amount);\n      } else {\n        predictedExpenses += parseCurrencyFloat(transaction.amount);\n      }\n    } else if (transaction.type === 'income') {\n      if (transaction.paid) {\n        income += parseCurrencyFloat(transaction.amount);\n      } else {\n        predictedIncome += parseCurrencyFloat(transaction.amount);\n      }\n    }\n  });\n\n  predictedExpenses += expenses;\n  predictedIncome += income;\n  const balance = income - expenses;\n  const predictedBalance = predictedIncome - predictedExpenses;\n\n  balance.toFixed(2);\n\n  return {\n    income,\n    predictedIncome,\n    expenses,\n    predictedExpenses,\n    balance,\n    predictedBalance,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}