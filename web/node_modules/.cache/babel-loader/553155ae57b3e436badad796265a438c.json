{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Public/repos/financix/src/components/Graphs/Pie/index.jsx\";\nimport React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport 'tippy.js/dist/tippy.css';\nimport * as d3 from 'd3';\nimport tippy, { followCursor } from 'tippy.js';\nimport { LegendColorBox, LegendTitle, LegendPercentage, LegendItem, PieWrapper } from './styles';\n\nconst Pie = ({\n  data,\n  outerRadius,\n  innerRadius = 0,\n  width,\n  height,\n  legend = false,\n  colors\n}) => {\n  const graphRef = useRef(null);\n  const total = data.reduce((accumulator, currentData) => ({\n    value: accumulator.value + currentData.value\n  }));\n  let arcs = d3.pie().value(value => value.value)(data).sort((a, b) => a.data.name.localeCompare(b.data.name));\n  const arc = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius);\n  useEffect(() => {\n    const graphContainer = d3.select(graphRef.current);\n    const graphRenderData = graphContainer.selectAll('path').data(arcs);\n    graphRenderData.enter().append('path').attr('fill', d => {\n      return colors[d.index];\n    }).attr('stroke', 'white').attr('d', arc).each(function creatTolltip(d) {\n      const pathReference = d3.select(this)._groups[0][0];\n\n      tippy(pathReference, {\n        content: `${d.data.name}: ${(d.data.value / total.value * 100).toFixed(2)}%`,\n        theme: 'light',\n        arrow: false,\n        followCursor: true,\n        plugins: [followCursor]\n      });\n    });\n\n    const update = () => {};\n  }, [arc, arcs, colors, total.value]);\n  return React.createElement(PieWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    ref: graphRef,\n    transform: `translate(${outerRadius} ${outerRadius})`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }))), legend && React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, arcs.map(currentArc => React.createElement(LegendItem, {\n    key: currentArc.data.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(LegendColorBox, {\n    color: colors[currentArc.index],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(LegendTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, currentArc.data.name, \": \"), React.createElement(LegendPercentage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, currentArc.data.value)))));\n};\n\nPie.defaultProps = {\n  legend: false,\n  innerRadius: 0\n};\nPie.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  outerRadius: PropTypes.number.isRequired,\n  innerRadius: PropTypes.number,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  legend: PropTypes.bool,\n  colors: PropTypes.arrayOf(PropTypes.string).isRequired\n};\nexport default Pie;","map":{"version":3,"sources":["/home/lucas/Public/repos/financix/src/components/Graphs/Pie/index.jsx"],"names":["React","useRef","useEffect","PropTypes","d3","tippy","followCursor","LegendColorBox","LegendTitle","LegendPercentage","LegendItem","PieWrapper","Pie","data","outerRadius","innerRadius","width","height","legend","colors","graphRef","total","reduce","accumulator","currentData","value","arcs","pie","sort","a","b","name","localeCompare","arc","graphContainer","select","current","graphRenderData","selectAll","enter","append","attr","d","index","each","creatTolltip","pathReference","_groups","content","toFixed","theme","arrow","plugins","update","map","currentArc","id","defaultProps","propTypes","arrayOf","object","isRequired","number","bool","string"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,yBAAP;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,KAAP,IAAgBC,YAAhB,QAAoC,UAApC;AACA,SACEC,cADF,EAEEC,WAFF,EAGEC,gBAHF,EAIEC,UAJF,EAKEC,UALF,QAMO,UANP;;AAQA,MAAMC,GAAG,GAAG,CAAC;AACXC,EAAAA,IADW;AAEXC,EAAAA,WAFW;AAGXC,EAAAA,WAAW,GAAG,CAHH;AAIXC,EAAAA,KAJW;AAKXC,EAAAA,MALW;AAMXC,EAAAA,MAAM,GAAG,KANE;AAOXC,EAAAA;AAPW,CAAD,KAQN;AACJ,QAAMC,QAAQ,GAAGnB,MAAM,CAAC,IAAD,CAAvB;AAEA,QAAMoB,KAAK,GAAGR,IAAI,CAACS,MAAL,CAAY,CAACC,WAAD,EAAcC,WAAd,MAA+B;AACvDC,IAAAA,KAAK,EAAEF,WAAW,CAACE,KAAZ,GAAoBD,WAAW,CAACC;AADgB,GAA/B,CAAZ,CAAd;AAIA,MAAIC,IAAI,GAAGtB,EAAE,CACVuB,GADQ,GAERF,KAFQ,CAEFA,KAAK,IAAIA,KAAK,CAACA,KAFb,EAEoBZ,IAFpB,EAGRe,IAHQ,CAGH,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAChB,IAAF,CAAOkB,IAAP,CAAYC,aAAZ,CAA0BF,CAAC,CAACjB,IAAF,CAAOkB,IAAjC,CAHP,CAAX;AAKA,QAAME,GAAG,GAAG7B,EAAE,CACX6B,GADS,GAETlB,WAFS,CAEGA,WAFH,EAGTD,WAHS,CAGGA,WAHH,CAAZ;AAKAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgC,cAAc,GAAG9B,EAAE,CAAC+B,MAAH,CAAUf,QAAQ,CAACgB,OAAnB,CAAvB;AAEA,UAAMC,eAAe,GAAGH,cAAc,CAACI,SAAf,CAAyB,MAAzB,EAAiCzB,IAAjC,CAAsCa,IAAtC,CAAxB;AAEAW,IAAAA,eAAe,CACZE,KADH,GAEGC,MAFH,CAEU,MAFV,EAGGC,IAHH,CAGQ,MAHR,EAGgBC,CAAC,IAAI;AACjB,aAAOvB,MAAM,CAACuB,CAAC,CAACC,KAAH,CAAb;AACD,KALH,EAMGF,IANH,CAMQ,QANR,EAMkB,OANlB,EAOGA,IAPH,CAOQ,GAPR,EAOaR,GAPb,EAQGW,IARH,CAQQ,SAASC,YAAT,CAAsBH,CAAtB,EAAyB;AAC7B,YAAMI,aAAa,GAAG1C,EAAE,CAAC+B,MAAH,CAAU,IAAV,EAAgBY,OAAhB,CAAwB,CAAxB,EAA2B,CAA3B,CAAtB;;AAEA1C,MAAAA,KAAK,CAACyC,aAAD,EAAgB;AACnBE,QAAAA,OAAO,EAAG,GAAEN,CAAC,CAAC7B,IAAF,CAAOkB,IAAK,KAAI,CACzBW,CAAC,CAAC7B,IAAF,CAAOY,KAAP,GAAeJ,KAAK,CAACI,KAAtB,GACA,GAF0B,EAG1BwB,OAH0B,CAGlB,CAHkB,CAGf,GAJM;AAKnBC,QAAAA,KAAK,EAAE,OALY;AAMnBC,QAAAA,KAAK,EAAE,KANY;AAOnB7C,QAAAA,YAAY,EAAE,IAPK;AAQnB8C,QAAAA,OAAO,EAAE,CAAC9C,YAAD;AARU,OAAhB,CAAL;AAUD,KArBH;;AAuBA,UAAM+C,MAAM,GAAG,MAAM,CAAE,CAAvB;AACD,GA7BQ,EA6BN,CAACpB,GAAD,EAAMP,IAAN,EAAYP,MAAZ,EAAoBE,KAAK,CAACI,KAA1B,CA7BM,CAAT;AA+BA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,KAAK,EAAET,KAAZ;AAAmB,IAAA,MAAM,EAAEC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAEG,QADP;AAEE,IAAA,SAAS,EAAG,aAAYN,WAAY,IAAGA,WAAY,GAFrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,EASGI,MAAM,IACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGQ,IAAI,CAAC4B,GAAL,CAASC,UAAU,IAClB,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAEA,UAAU,CAAC1C,IAAX,CAAgB2C,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAgB,IAAA,KAAK,EAAErC,MAAM,CAACoC,UAAU,CAACZ,KAAZ,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcY,UAAU,CAAC1C,IAAX,CAAgBkB,IAA9B,OAFF,EAGE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBwB,UAAU,CAAC1C,IAAX,CAAgBY,KAAnC,CAHF,CADD,CADH,CAVJ,CADF;AAuBD,CA/ED;;AAiFAb,GAAG,CAAC6C,YAAJ,GAAmB;AACjBvC,EAAAA,MAAM,EAAE,KADS;AAEjBH,EAAAA,WAAW,EAAE;AAFI,CAAnB;AAKAH,GAAG,CAAC8C,SAAJ,GAAgB;AACd7C,EAAAA,IAAI,EAAEV,SAAS,CAACwD,OAAV,CAAkBxD,SAAS,CAACyD,MAA5B,EAAoCC,UAD5B;AAEd/C,EAAAA,WAAW,EAAEX,SAAS,CAAC2D,MAAV,CAAiBD,UAFhB;AAGd9C,EAAAA,WAAW,EAAEZ,SAAS,CAAC2D,MAHT;AAId9C,EAAAA,KAAK,EAAEb,SAAS,CAAC2D,MAAV,CAAiBD,UAJV;AAKd5C,EAAAA,MAAM,EAAEd,SAAS,CAAC2D,MAAV,CAAiBD,UALX;AAMd3C,EAAAA,MAAM,EAAEf,SAAS,CAAC4D,IANJ;AAOd5C,EAAAA,MAAM,EAAEhB,SAAS,CAACwD,OAAV,CAAkBxD,SAAS,CAAC6D,MAA5B,EAAoCH;AAP9B,CAAhB;AAUA,eAAejD,GAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport 'tippy.js/dist/tippy.css';\nimport * as d3 from 'd3';\nimport tippy, { followCursor } from 'tippy.js';\nimport {\n  LegendColorBox,\n  LegendTitle,\n  LegendPercentage,\n  LegendItem,\n  PieWrapper,\n} from './styles';\n\nconst Pie = ({\n  data,\n  outerRadius,\n  innerRadius = 0,\n  width,\n  height,\n  legend = false,\n  colors,\n}) => {\n  const graphRef = useRef(null);\n\n  const total = data.reduce((accumulator, currentData) => ({\n    value: accumulator.value + currentData.value,\n  }));\n\n  let arcs = d3\n    .pie()\n    .value(value => value.value)(data)\n    .sort((a, b) => a.data.name.localeCompare(b.data.name));\n\n  const arc = d3\n    .arc()\n    .innerRadius(innerRadius)\n    .outerRadius(outerRadius);\n\n  useEffect(() => {\n    const graphContainer = d3.select(graphRef.current);\n\n    const graphRenderData = graphContainer.selectAll('path').data(arcs);\n\n    graphRenderData\n      .enter()\n      .append('path')\n      .attr('fill', d => {\n        return colors[d.index];\n      })\n      .attr('stroke', 'white')\n      .attr('d', arc)\n      .each(function creatTolltip(d) {\n        const pathReference = d3.select(this)._groups[0][0];\n\n        tippy(pathReference, {\n          content: `${d.data.name}: ${(\n            (d.data.value / total.value) *\n            100\n          ).toFixed(2)}%`,\n          theme: 'light',\n          arrow: false,\n          followCursor: true,\n          plugins: [followCursor],\n        });\n      });\n\n    const update = () => {};\n  }, [arc, arcs, colors, total.value]);\n\n  return (\n    <PieWrapper>\n      <div>\n        <svg width={width} height={height}>\n          <g\n            ref={graphRef}\n            transform={`translate(${outerRadius} ${outerRadius})`}\n          />\n        </svg>\n      </div>\n      {legend && (\n        <ul>\n          {arcs.map(currentArc => (\n            <LegendItem key={currentArc.data.id}>\n              <LegendColorBox color={colors[currentArc.index]} />\n              <LegendTitle>{currentArc.data.name}: </LegendTitle>\n              <LegendPercentage>{currentArc.data.value}</LegendPercentage>\n            </LegendItem>\n          ))}\n        </ul>\n      )}\n    </PieWrapper>\n  );\n};\n\nPie.defaultProps = {\n  legend: false,\n  innerRadius: 0,\n};\n\nPie.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  outerRadius: PropTypes.number.isRequired,\n  innerRadius: PropTypes.number,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  legend: PropTypes.bool,\n  colors: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Pie;\n"]},"metadata":{},"sourceType":"module"}