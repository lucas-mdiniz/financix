{"ast":null,"code":"import _objectSpread from \"/home/lucas/Public/repos/financix/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/lucas/Public/repos/financix/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/lucas/Public/repos/financix/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/lucas/Public/repos/financix/src/components/AddTransaction/index.jsx\";\nimport React, { useState } from 'react';\nimport { Formik, Form, useField, useFormikContext } from 'formik';\nimport DatePicker from 'react-datepicker';\nimport * as Yup from 'yup';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst MyTextInput = (_ref) => {\n  let label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  const _useField = useField(props),\n        _useField2 = _slicedToArray(_useField, 2),\n        field = _useField2[0],\n        meta = _useField2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, label), React.createElement(\"input\", Object.assign({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  })), meta.touched && meta.error ? React.createElement(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nconst MyDateField = (_ref2) => {\n  let label = _ref2.label,\n      props = _objectWithoutProperties(_ref2, [\"label\"]);\n\n  const _useField3 = useField(...props, type),\n        _useField4 = _slicedToArray(_useField3, 2),\n        field = _useField4[0],\n        meta = _useField4[1];\n\n  const _useFormikContext = useFormikContext(),\n        setFieldValue = _useFormikContext.setFieldValue;\n\n  const onChange = field.onChange,\n        newField = _objectWithoutProperties(field, [\"onChange\"]);\n\n  return React.createElement(React.Fragment, null, React.createElement(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, label, React.createElement(DatePicker, Object.assign({\n    selected: meta.value,\n    onChange: date => setFieldValue('date', date)\n  }, newField, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }))), meta.touched && meta.error ? React.createElement(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nconst MyCheckbox = (_ref3) => {\n  let children = _ref3.children,\n      props = _objectWithoutProperties(_ref3, [\"children\"]);\n\n  const _useField5 = useField(_objectSpread({}, props, {\n    type: 'checkbox'\n  })),\n        _useField6 = _slicedToArray(_useField5, 2),\n        field = _useField6[0],\n        meta = _useField6[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(\"label\", {\n    className: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({}, field, props, {\n    type: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), children), meta.touched && meta.error ? React.createElement(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nconst AddTransaction = () => {\n  return React.createElement(Formik, {\n    initialValues: {\n      amout: '',\n      description: '',\n      date: new Date()\n    },\n    validationSchema: Yup.object({\n      firstName: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n      lastName: Yup.string().max(20, 'Must be 20 characters or less').required('Required'),\n      email: Yup.string().email('Invalid email addresss`').required('Required'),\n      acceptedTerms: Yup.boolean().required('Required').oneOf([true], 'You must accept the terms and conditions.'),\n      jobType: Yup.string() // specify the set of valid values for job type\n      // @see http://bit.ly/yup-mixed-oneOf\n      .oneOf(['designer', 'development', 'product', 'other'], 'Invalid Job Type').required('Required')\n    }),\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(MyTextInput, {\n    label: \"Description\",\n    name: \"description\",\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(MyTextInput, {\n    label: \"Amount\",\n    name: \"amount\",\n    type: \"text\",\n    placeholder: \"0,00\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(MyDateField, {\n    label: \"Date\",\n    name: \"date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })));\n};\n\nexport default AddTransaction;","map":{"version":3,"sources":["/home/lucas/Public/repos/financix/src/components/AddTransaction/index.jsx"],"names":["React","useState","Formik","Form","useField","useFormikContext","DatePicker","Yup","MyTextInput","label","props","field","meta","id","name","touched","error","MyDateField","type","setFieldValue","onChange","newField","value","date","MyCheckbox","children","AddTransaction","amout","description","Date","object","firstName","string","max","required","lastName","email","acceptedTerms","boolean","oneOf","jobType","values","setSubmitting","setTimeout","alert","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Formik, Form, useField, useFormikContext } from 'formik';\nimport DatePicker from 'react-datepicker';\nimport * as Yup from 'yup';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst MyTextInput = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input className=\"text-input\" {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nconst MyDateField = ({ label, ...props }) => {\n  const [field, meta] = useField(...props, (type: 'date'));\n\n  const { setFieldValue } = useFormikContext();\n  const { onChange, ...newField } = field;\n\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>\n        {label}\n        <DatePicker\n          selected={meta.value}\n          onChange={date => setFieldValue('date', date)}\n          {...newField}\n          {...props}\n        />\n      </label>\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nconst MyCheckbox = ({ children, ...props }) => {\n  const [field, meta] = useField({ ...props, type: 'checkbox' });\n  return (\n    <>\n      <label className=\"checkbox\">\n        <input {...field} {...props} type=\"checkbox\" />\n        {children}\n      </label>\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nconst AddTransaction = () => {\n  return (\n    <Formik\n      initialValues={{\n        amout: '',\n        description: '',\n        date: new Date(),\n      }}\n      validationSchema={Yup.object({\n        firstName: Yup.string()\n          .max(15, 'Must be 15 characters or less')\n          .required('Required'),\n        lastName: Yup.string()\n          .max(20, 'Must be 20 characters or less')\n          .required('Required'),\n        email: Yup.string()\n          .email('Invalid email addresss`')\n          .required('Required'),\n        acceptedTerms: Yup.boolean()\n          .required('Required')\n          .oneOf([true], 'You must accept the terms and conditions.'),\n        jobType: Yup.string()\n          // specify the set of valid values for job type\n          // @see http://bit.ly/yup-mixed-oneOf\n          .oneOf(\n            ['designer', 'development', 'product', 'other'],\n            'Invalid Job Type'\n          )\n          .required('Required'),\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n    >\n      <Form>\n        <MyTextInput label=\"Description\" name=\"description\" type=\"text\" />\n\n        <MyTextInput\n          label=\"Amount\"\n          name=\"amount\"\n          type=\"text\"\n          placeholder=\"0,00\"\n        />\n\n        <MyDateField label=\"Date\" name=\"date\" />\n      </Form>\n    </Formik>\n  );\n};\n\nexport default AddTransaction;\n"]},"metadata":{},"sourceType":"module"}