{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Public/repos/financix/src/components/Graphs/Pie/index.jsx\";\nimport React, { useRef } from 'react';\nimport 'tippy.js/dist/tippy.css';\nimport * as d3 from 'd3';\nimport tippy, { followCursor } from 'tippy.js';\nimport { LegendColorBox, LegendTitle, LegendPercentage, LegendItem, PieWrapper } from './styles';\n\nconst Pie = ({\n  data,\n  outerRadius,\n  innerRadius = 0,\n  width,\n  height,\n  legend,\n  colors\n}) => {\n  const graphRef = useRef(null);\n  const graphContainer = d3.select(graphRef.current);\n  let total;\n\n  if (data.length > 0) {\n    total = data.reduce((accumulator, currentData) => ({\n      value: accumulator.value + currentData.value\n    })) || 1;\n  }\n\n  const arcs = d3.pie().value(value => value.value)(data).sort((a, b) => a.data.name.localeCompare(b.data.name));\n  const arc = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius);\n  graphContainer.selectAll('path').data(arcs).enter().append('path').attr('fill', d => {\n    return colors[d.index];\n  }).attr('stroke', 'white').attr('d', arc).each(function creatTolltip(d) {\n    const pathReference = d3.select(this)._groups[0][0];\n\n    tippy(pathReference, {\n      content: `${d.data.name}: ${(d.data.value / total.value * 100).toFixed(2)}%`,\n      theme: 'light',\n      arrow: false,\n      followCursor: true,\n      plugins: [followCursor]\n    });\n  });\n  return React.createElement(PieWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    ref: graphRef,\n    transform: `translate(${outerRadius} ${outerRadius})`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }))), legend && React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, arcs.map(currentArc => React.createElement(LegendItem, {\n    key: currentArc.data.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(LegendColorBox, {\n    color: colors[currentArc.index],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), React.createElement(LegendTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, currentArc.data.name, \": \"), React.createElement(LegendPercentage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"R$ \", currentArc.data.value)))));\n};\n\nexport default Pie;","map":{"version":3,"sources":["/home/lucas/Public/repos/financix/src/components/Graphs/Pie/index.jsx"],"names":["React","useRef","d3","tippy","followCursor","LegendColorBox","LegendTitle","LegendPercentage","LegendItem","PieWrapper","Pie","data","outerRadius","innerRadius","width","height","legend","colors","graphRef","graphContainer","select","current","total","length","reduce","accumulator","currentData","value","arcs","pie","sort","a","b","name","localeCompare","arc","selectAll","enter","append","attr","d","index","each","creatTolltip","pathReference","_groups","content","toFixed","theme","arrow","plugins","map","currentArc","id"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport 'tippy.js/dist/tippy.css';\nimport * as d3 from 'd3';\nimport tippy, { followCursor } from 'tippy.js';\nimport {\n  LegendColorBox,\n  LegendTitle,\n  LegendPercentage,\n  LegendItem,\n  PieWrapper,\n} from './styles';\n\nconst Pie = ({\n  data,\n  outerRadius,\n  innerRadius = 0,\n  width,\n  height,\n  legend,\n  colors,\n}) => {\n  const graphRef = useRef(null);\n\n  const graphContainer = d3.select(graphRef.current);\n\n  let total;\n  if (data.length > 0) {\n    total =\n      data.reduce((accumulator, currentData) => ({\n        value: accumulator.value + currentData.value,\n      })) || 1;\n  }\n\n  const arcs = d3\n    .pie()\n    .value(value => value.value)(data)\n    .sort((a, b) => a.data.name.localeCompare(b.data.name));\n\n  const arc = d3\n    .arc()\n    .innerRadius(innerRadius)\n    .outerRadius(outerRadius);\n\n  graphContainer\n    .selectAll('path')\n    .data(arcs)\n    .enter()\n    .append('path')\n    .attr('fill', d => {\n      return colors[d.index];\n    })\n    .attr('stroke', 'white')\n    .attr('d', arc)\n    .each(function creatTolltip(d) {\n      const pathReference = d3.select(this)._groups[0][0];\n\n      tippy(pathReference, {\n        content: `${d.data.name}: ${(\n          (d.data.value / total.value) *\n          100\n        ).toFixed(2)}%`,\n        theme: 'light',\n        arrow: false,\n        followCursor: true,\n        plugins: [followCursor],\n      });\n    });\n\n  return (\n    <PieWrapper>\n      <div>\n        <svg width={width} height={height}>\n          <g\n            ref={graphRef}\n            transform={`translate(${outerRadius} ${outerRadius})`}\n          />\n        </svg>\n      </div>\n      {legend && (\n        <ul>\n          {arcs.map(currentArc => (\n            <LegendItem key={currentArc.data.id}>\n              <LegendColorBox color={colors[currentArc.index]} />\n              <LegendTitle>{currentArc.data.name}: </LegendTitle>\n              <LegendPercentage>R$ {currentArc.data.value}</LegendPercentage>\n            </LegendItem>\n          ))}\n        </ul>\n      )}\n    </PieWrapper>\n  );\n};\n\nexport default Pie;\n"]},"metadata":{},"sourceType":"module"}