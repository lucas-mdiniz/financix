{"ast":null,"code":"import _slicedToArray from \"/home/lucas/Public/repos/financix/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lucas/Public/repos/financix/src/pages/Transactions/index.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { FaCheck, FaTimes } from 'react-icons/fa';\nimport { Formik, Form, useField } from 'formik';\nimport * as Yup from 'yup';\nimport PageTitle from '../../components/PageTitle';\nimport Card from '../../containers/Card';\nimport api from '../../services/api';\nimport { TransactionItem, TransactionStatus, TransactionTitle, TransactionValue, TransactionDate, ButtonAddTransaction } from './styles';\nimport Modal from '../../containers/Modal';\n\nconst Transactions = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        transactions = _useState2[0],\n        setTransactions = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        modalOpen = _useState4[0],\n        setModalOpen = _useState4[1];\n\n  useEffect(() => {\n    async function getTransactions() {\n      try {\n        const response = await api.get('/transactions');\n        setTransactions(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    getTransactions();\n  }, []);\n\n  const handleClose = e => {\n    if (e.target === e.currentTarget) {\n      setModalOpen(false);\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(PageTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Transactions\"), React.createElement(Card, {\n    backgroundColor: \"#fff\",\n    borderRadius: \"10px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, transactions.map(transaction => {\n    return React.createElement(TransactionItem, {\n      key: transaction.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(TransactionDate, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, transaction.date), React.createElement(TransactionTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, transaction.title), React.createElement(TransactionStatus, {\n      status: transaction.paid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, transaction.paid ? React.createElement(FaCheck, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }) : React.createElement(FaTimes, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    })), React.createElement(TransactionValue, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, transaction.value));\n  }))), React.createElement(ButtonAddTransaction, {\n    onClick: () => setModalOpen(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Add Transaction\"), React.createElement(Modal, {\n    open: modalOpen,\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Formik, {\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      acceptedTerms: false,\n      // added for our checkbox\n      jobType: '' // added for our select\n\n    },\n    validationSchema: Yup.object({\n      firstName: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n      lastName: Yup.string().max(20, 'Must be 20 characters or less').required('Required'),\n      email: Yup.string().email('Invalid email addresss`').required('Required'),\n      acceptedTerms: Yup.boolean().required('Required').oneOf([true], 'You must accept the terms and conditions.'),\n      jobType: Yup.string() // specify the set of valid values for job type\n      // @see http://bit.ly/yup-mixed-oneOf\n      .oneOf(['designer', 'development', 'product', 'other'], 'Invalid Job Type').required('Required')\n    }),\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }))));\n};\n\nexport default Transactions;","map":{"version":3,"sources":["/home/lucas/Public/repos/financix/src/pages/Transactions/index.jsx"],"names":["React","useState","useEffect","FaCheck","FaTimes","Formik","Form","useField","Yup","PageTitle","Card","api","TransactionItem","TransactionStatus","TransactionTitle","TransactionValue","TransactionDate","ButtonAddTransaction","Modal","Transactions","transactions","setTransactions","modalOpen","setModalOpen","getTransactions","response","get","data","error","console","handleClose","e","target","currentTarget","map","transaction","id","date","title","paid","value","firstName","lastName","email","acceptedTerms","jobType","object","string","max","required","boolean","oneOf","values","setSubmitting","setTimeout","alert","JSON","stringify"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,gBAAjC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,QAAuC,QAAvC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AACA,SACEC,eADF,EAEEC,iBAFF,EAGEC,gBAHF,EAIEC,gBAJF,EAKEC,eALF,EAMEC,oBANF,QAOO,UAPP;AAQA,OAAOC,KAAP,MAAkB,wBAAlB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA,oBACelB,QAAQ,CAAC,EAAD,CADvB;AAAA;AAAA,QAClBmB,YADkB;AAAA,QACJC,eADI;;AAAA,qBAESpB,QAAQ,CAAC,KAAD,CAFjB;AAAA;AAAA,QAElBqB,SAFkB;AAAA,QAEPC,YAFO;;AAIzBrB,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAesB,eAAf,GAAiC;AAC/B,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAJ,CAAQ,eAAR,CAAvB;AACAL,QAAAA,eAAe,CAACI,QAAQ,CAACE,IAAV,CAAf;AACD,OAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF;;AAEDJ,IAAAA,eAAe;AAChB,GAXQ,EAWN,EAXM,CAAT;;AAaA,QAAMM,WAAW,GAAGC,CAAC,IAAI;AACvB,QAAIA,CAAC,CAACC,MAAF,KAAaD,CAAC,CAACE,aAAnB,EAAkC;AAChCV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAJD;;AAMA,SACE,0CACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,oBAAC,IAAD;AAAM,IAAA,eAAe,EAAC,MAAtB;AAA6B,IAAA,YAAY,EAAC,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,YAAY,CAACc,GAAb,CAAiBC,WAAW,IAAI;AAC/B,WACE,oBAAC,eAAD;AAAiB,MAAA,GAAG,EAAEA,WAAW,CAACC,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkBD,WAAW,CAACE,IAA9B,CADF,EAEE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBF,WAAW,CAACG,KAA/B,CAFF,EAGE,oBAAC,iBAAD;AAAmB,MAAA,MAAM,EAAEH,WAAW,CAACI,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGJ,WAAW,CAACI,IAAZ,GAAmB,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAnB,GAAiC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADpC,CAHF,EAME,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBJ,WAAW,CAACK,KAA/B,CANF,CADF;AAUD,GAXA,CADH,CADF,CAFF,EAkBE,oBAAC,oBAAD;AAAsB,IAAA,OAAO,EAAE,MAAMjB,YAAY,CAAC,IAAD,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAlBF,EAqBE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAED,SAAb;AAAwB,IAAA,OAAO,EAAEQ,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbW,MAAAA,SAAS,EAAE,EADE;AAEbC,MAAAA,QAAQ,EAAE,EAFG;AAGbC,MAAAA,KAAK,EAAE,EAHM;AAIbC,MAAAA,aAAa,EAAE,KAJF;AAIS;AACtBC,MAAAA,OAAO,EAAE,EALI,CAKA;;AALA,KADjB;AAQE,IAAA,gBAAgB,EAAErC,GAAG,CAACsC,MAAJ,CAAW;AAC3BL,MAAAA,SAAS,EAAEjC,GAAG,CAACuC,MAAJ,GACRC,GADQ,CACJ,EADI,EACA,+BADA,EAERC,QAFQ,CAEC,UAFD,CADgB;AAI3BP,MAAAA,QAAQ,EAAElC,GAAG,CAACuC,MAAJ,GACPC,GADO,CACH,EADG,EACC,+BADD,EAEPC,QAFO,CAEE,UAFF,CAJiB;AAO3BN,MAAAA,KAAK,EAAEnC,GAAG,CAACuC,MAAJ,GACJJ,KADI,CACE,yBADF,EAEJM,QAFI,CAEK,UAFL,CAPoB;AAU3BL,MAAAA,aAAa,EAAEpC,GAAG,CAAC0C,OAAJ,GACZD,QADY,CACH,UADG,EAEZE,KAFY,CAEN,CAAC,IAAD,CAFM,EAEE,2CAFF,CAVY;AAa3BN,MAAAA,OAAO,EAAErC,GAAG,CAACuC,MAAJ,GACP;AACA;AAFO,OAGNI,KAHM,CAIL,CAAC,UAAD,EAAa,aAAb,EAA4B,SAA5B,EAAuC,OAAvC,CAJK,EAKL,kBALK,EAONF,QAPM,CAOG,UAPH;AAbkB,KAAX,CARpB;AA8BE,IAAA,QAAQ,EAAE,CAACG,MAAD,EAAS;AAAEC,MAAAA;AAAF,KAAT,KAA+B;AACvCC,MAAAA,UAAU,CAAC,MAAM;AACfC,QAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeL,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACAC,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD,OAHS,EAGP,GAHO,CAAV;AAID,KAnCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAqCE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArCF,CADF,CArBF,CADF;AAiED,CAxFD;;AA0FA,eAAelC,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { FaCheck, FaTimes } from 'react-icons/fa';\nimport { Formik, Form, useField } from 'formik';\nimport * as Yup from 'yup';\nimport PageTitle from '../../components/PageTitle';\nimport Card from '../../containers/Card';\nimport api from '../../services/api';\nimport {\n  TransactionItem,\n  TransactionStatus,\n  TransactionTitle,\n  TransactionValue,\n  TransactionDate,\n  ButtonAddTransaction,\n} from './styles';\nimport Modal from '../../containers/Modal';\n\nconst Transactions = () => {\n  const [transactions, setTransactions] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    async function getTransactions() {\n      try {\n        const response = await api.get('/transactions');\n        setTransactions(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    getTransactions();\n  }, []);\n\n  const handleClose = e => {\n    if (e.target === e.currentTarget) {\n      setModalOpen(false);\n    }\n  };\n\n  return (\n    <>\n      <PageTitle>Transactions</PageTitle>\n      <Card backgroundColor=\"#fff\" borderRadius=\"10px\">\n        <ul>\n          {transactions.map(transaction => {\n            return (\n              <TransactionItem key={transaction.id}>\n                <TransactionDate>{transaction.date}</TransactionDate>\n                <TransactionTitle>{transaction.title}</TransactionTitle>\n                <TransactionStatus status={transaction.paid}>\n                  {transaction.paid ? <FaCheck /> : <FaTimes />}\n                </TransactionStatus>\n                <TransactionValue>{transaction.value}</TransactionValue>\n              </TransactionItem>\n            );\n          })}\n        </ul>\n      </Card>\n      <ButtonAddTransaction onClick={() => setModalOpen(true)}>\n        Add Transaction\n      </ButtonAddTransaction>\n      <Modal open={modalOpen} onClose={handleClose}>\n        <Formik\n          initialValues={{\n            firstName: '',\n            lastName: '',\n            email: '',\n            acceptedTerms: false, // added for our checkbox\n            jobType: '', // added for our select\n          }}\n          validationSchema={Yup.object({\n            firstName: Yup.string()\n              .max(15, 'Must be 15 characters or less')\n              .required('Required'),\n            lastName: Yup.string()\n              .max(20, 'Must be 20 characters or less')\n              .required('Required'),\n            email: Yup.string()\n              .email('Invalid email addresss`')\n              .required('Required'),\n            acceptedTerms: Yup.boolean()\n              .required('Required')\n              .oneOf([true], 'You must accept the terms and conditions.'),\n            jobType: Yup.string()\n              // specify the set of valid values for job type\n              // @see http://bit.ly/yup-mixed-oneOf\n              .oneOf(\n                ['designer', 'development', 'product', 'other'],\n                'Invalid Job Type'\n              )\n              .required('Required'),\n          })}\n          onSubmit={(values, { setSubmitting }) => {\n            setTimeout(() => {\n              alert(JSON.stringify(values, null, 2));\n              setSubmitting(false);\n            }, 400);\n          }}\n        >\n          <Form></Form>\n        </Formik>\n      </Modal>\n    </>\n  );\n};\n\nexport default Transactions;\n"]},"metadata":{},"sourceType":"module"}